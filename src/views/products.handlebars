<div class="container mt-4">
    <h1>Productos</h1>
    <div class="row">
        {{#each products}}
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <img src="{{this.image}}" class="card-img-top p-3" alt="{{this.title}}" style="height: 200px; object-fit: contain;">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">{{this.title}}</h5>
                    <p class="card-text flex-grow-1">{{this.description}}</p>
                    <div class="mt-auto">
                        <p class="card-text"><strong>Precio:</strong> ${{this.price}}</p>
                        <p class="card-text"><strong>Categoría:</strong> {{this.category}}</p>
                        <p class="card-text"><strong>Stock:</strong> {{this.stock}}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <a href="/products/{{this._id}}" class="btn btn-info">Ver detalles</a>
                            <button onclick="addToCart('{{this._id}}')" class="btn btn-primary">Agregar al carrito</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {{else}}
        <div class="col-12">
            <div class="alert alert-info">No hay productos disponibles.</div>
        </div>
        {{/each}}
    </div>

    <div class="pagination justify-content-center mt-4">
        {{#if hasPrevPage}}
        <a href="/products?page={{prevPage}}{{#if query}}&query={{query}}{{/if}}{{#if sort}}&sort={{sort}}{{/if}}" class="btn btn-secondary mr-2">Anterior</a>
        {{/if}}
        <span class="mx-2">Página {{page}} de {{totalPages}}</span>
        {{#if hasNextPage}}
        <a href="/products?page={{nextPage}}{{#if query}}&query={{query}}{{/if}}{{#if sort}}&sort={{sort}}{{/if}}" class="btn btn-secondary ml-2">Siguiente</a>
        {{/if}}
    </div>
</div>

<script>
// Obtener o crear cartId en localStorage
async function getOrCreateCartId() {
    let cartId = localStorage.getItem('cartId');
    if (!cartId) {
        try {
            // Crear un carrito vacío
            const res = await fetch('/api/carts', { 
                method: 'POST', 
                headers: { 'Content-Type': 'application/json' } 
            });
            const data = await res.json();
            if (data.status === 'success') {
                cartId = data.payload._id;
                localStorage.setItem('cartId', cartId);
            } else {
                throw new Error('Error al crear carrito');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al crear carrito');
            return null;
        }
    }
    return cartId;
}

async function addToCart(productId) {
    const cartId = await getOrCreateCartId();
    if (!cartId) return;
    
    try {
        const res = await fetch(`/api/carts/${cartId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ product: productId, quantity: 1 })
        });
        
        if (res.ok) {
            alert('Producto agregado al carrito!');
        } else {
            const errorData = await res.json();
            alert('Error al agregar al carrito: ' + (errorData.error || 'Error desconocido'));
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error al agregar al carrito');
    }
}
</script>